// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/andreikurzhonkov/rabbix/bknd-go/profile/tier_calc.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	model "github.com/strips-finance/rabbit-dex-backend/model"
	profile "github.com/strips-finance/rabbit-dex-backend/profile"
	tsdb "github.com/strips-finance/rabbit-dex-backend/profile/tsdb"
)

// MockCalcVolumeCache is a mock of CalcVolumeCache interface.
type MockCalcVolumeCache struct {
	ctrl     *gomock.Controller
	recorder *MockCalcVolumeCacheMockRecorder
}

// MockCalcVolumeCacheMockRecorder is the mock recorder for MockCalcVolumeCache.
type MockCalcVolumeCacheMockRecorder struct {
	mock *MockCalcVolumeCache
}

// NewMockCalcVolumeCache creates a new mock instance.
func NewMockCalcVolumeCache(ctrl *gomock.Controller) *MockCalcVolumeCache {
	mock := &MockCalcVolumeCache{ctrl: ctrl}
	mock.recorder = &MockCalcVolumeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalcVolumeCache) EXPECT() *MockCalcVolumeCacheMockRecorder {
	return m.recorder
}

// GetVolume mocks base method.
func (m *MockCalcVolumeCache) GetVolume(arg0 profile.ProfileId) (decimal.Decimal, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockCalcVolumeCacheMockRecorder) GetVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockCalcVolumeCache)(nil).GetVolume), arg0)
}

// MockProfileTierService is a mock of ProfileTierService interface.
type MockProfileTierService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileTierServiceMockRecorder
}

// MockProfileTierServiceMockRecorder is the mock recorder for MockProfileTierService.
type MockProfileTierServiceMockRecorder struct {
	mock *MockProfileTierService
}

// NewMockProfileTierService creates a new mock instance.
func NewMockProfileTierService(ctrl *gomock.Controller) *MockProfileTierService {
	mock := &MockProfileTierService{ctrl: ctrl}
	mock.recorder = &MockProfileTierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileTierService) EXPECT() *MockProfileTierServiceMockRecorder {
	return m.recorder
}

// GetAffiliateProfilesTiers mocks base method.
func (m *MockProfileTierService) GetAffiliateProfilesTiers(ctx context.Context, profilesIds ...uint) ([]model.AffiliateProfileTier, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range profilesIds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAffiliateProfilesTiers", varargs...)
	ret0, _ := ret[0].([]model.AffiliateProfileTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffiliateProfilesTiers indicates an expected call of GetAffiliateProfilesTiers.
func (mr *MockProfileTierServiceMockRecorder) GetAffiliateProfilesTiers(ctx interface{}, profilesIds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, profilesIds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffiliateProfilesTiers", reflect.TypeOf((*MockProfileTierService)(nil).GetAffiliateProfilesTiers), varargs...)
}

// GetProfilesSpecialTiers mocks base method.
func (m *MockProfileTierService) GetProfilesSpecialTiers(arg0 context.Context) ([]model.ProfileSpecialTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilesSpecialTiers", arg0)
	ret0, _ := ret[0].([]model.ProfileSpecialTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilesSpecialTiers indicates an expected call of GetProfilesSpecialTiers.
func (mr *MockProfileTierServiceMockRecorder) GetProfilesSpecialTiers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilesSpecialTiers", reflect.TypeOf((*MockProfileTierService)(nil).GetProfilesSpecialTiers), arg0)
}

// GetTradingTiers mocks base method.
func (m *MockProfileTierService) GetTradingTiers(arg0 context.Context) ([]model.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingTiers", arg0)
	ret0, _ := ret[0].([]model.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingTiers indicates an expected call of GetTradingTiers.
func (mr *MockProfileTierServiceMockRecorder) GetTradingTiers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingTiers", reflect.TypeOf((*MockProfileTierService)(nil).GetTradingTiers), arg0)
}

// MockTierStore is a mock of TierStore interface.
type MockTierStore struct {
	ctrl     *gomock.Controller
	recorder *MockTierStoreMockRecorder
}

// MockTierStoreMockRecorder is the mock recorder for MockTierStore.
type MockTierStoreMockRecorder struct {
	mock *MockTierStore
}

// NewMockTierStore creates a new mock instance.
func NewMockTierStore(ctrl *gomock.Controller) *MockTierStore {
	mock := &MockTierStore{ctrl: ctrl}
	mock.recorder = &MockTierStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierStore) EXPECT() *MockTierStoreMockRecorder {
	return m.recorder
}

// GetReferralsByInvitedProfiles mocks base method.
func (m *MockTierStore) GetReferralsByInvitedProfiles(arg0 context.Context, arg1 ...profile.ProfileId) ([]tsdb.ReferralLink, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReferralsByInvitedProfiles", varargs...)
	ret0, _ := ret[0].([]tsdb.ReferralLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralsByInvitedProfiles indicates an expected call of GetReferralsByInvitedProfiles.
func (mr *MockTierStoreMockRecorder) GetReferralsByInvitedProfiles(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralsByInvitedProfiles", reflect.TypeOf((*MockTierStore)(nil).GetReferralsByInvitedProfiles), varargs...)
}
