// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/andreikurzhonkov/rabbix/bknd-go/profile/periodics/onboard_tier/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/strips-finance/rabbit-dex-backend/model"
	profile "github.com/strips-finance/rabbit-dex-backend/profile"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetProfilesIdsAfterCreatedAt mocks base method.
func (m *MockStore) GetProfilesIdsAfterCreatedAt(ctx context.Context, afterTsMicro int64) ([]profile.ProfileId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilesIdsAfterCreatedAt", ctx, afterTsMicro)
	ret0, _ := ret[0].([]profile.ProfileId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilesIdsAfterCreatedAt indicates an expected call of GetProfilesIdsAfterCreatedAt.
func (mr *MockStoreMockRecorder) GetProfilesIdsAfterCreatedAt(ctx, afterTsMicro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilesIdsAfterCreatedAt", reflect.TypeOf((*MockStore)(nil).GetProfilesIdsAfterCreatedAt), ctx, afterTsMicro)
}

// MockMarketsTierService is a mock of MarketsTierService interface.
type MockMarketsTierService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketsTierServiceMockRecorder
}

// MockMarketsTierServiceMockRecorder is the mock recorder for MockMarketsTierService.
type MockMarketsTierServiceMockRecorder struct {
	mock *MockMarketsTierService
}

// NewMockMarketsTierService creates a new mock instance.
func NewMockMarketsTierService(ctrl *gomock.Controller) *MockMarketsTierService {
	mock := &MockMarketsTierService{ctrl: ctrl}
	mock.recorder = &MockMarketsTierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketsTierService) EXPECT() *MockMarketsTierServiceMockRecorder {
	return m.recorder
}

// UpdateProfilesToTiers mocks base method.
func (m *MockMarketsTierService) UpdateProfilesToTiers(ctx context.Context, profilesToTiers []model.ProfileTier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilesToTiers", ctx, profilesToTiers)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfilesToTiers indicates an expected call of UpdateProfilesToTiers.
func (mr *MockMarketsTierServiceMockRecorder) UpdateProfilesToTiers(ctx, profilesToTiers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilesToTiers", reflect.TypeOf((*MockMarketsTierService)(nil).UpdateProfilesToTiers), ctx, profilesToTiers)
}

// MockTierCalc is a mock of TierCalc interface.
type MockTierCalc struct {
	ctrl     *gomock.Controller
	recorder *MockTierCalcMockRecorder
}

// MockTierCalcMockRecorder is the mock recorder for MockTierCalc.
type MockTierCalcMockRecorder struct {
	mock *MockTierCalc
}

// NewMockTierCalc creates a new mock instance.
func NewMockTierCalc(ctrl *gomock.Controller) *MockTierCalc {
	mock := &MockTierCalc{ctrl: ctrl}
	mock.recorder = &MockTierCalcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierCalc) EXPECT() *MockTierCalcMockRecorder {
	return m.recorder
}

// GetProfileTier mocks base method.
func (m *MockTierCalc) GetProfileTier(profileId profile.ProfileId) (model.ProfileTier, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileTier", profileId)
	ret0, _ := ret[0].(model.ProfileTier)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetProfileTier indicates an expected call of GetProfileTier.
func (mr *MockTierCalcMockRecorder) GetProfileTier(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileTier", reflect.TypeOf((*MockTierCalc)(nil).GetProfileTier), profileId)
}

// Recalculate mocks base method.
func (m *MockTierCalc) Recalculate(ctx context.Context, profilesIds []profile.ProfileId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recalculate", ctx, profilesIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recalculate indicates an expected call of Recalculate.
func (mr *MockTierCalcMockRecorder) Recalculate(ctx, profilesIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recalculate", reflect.TypeOf((*MockTierCalc)(nil).Recalculate), ctx, profilesIds)
}
