// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/andreikurzhonkov/rabbix/bknd-go/profile/periodics/cache/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	model "github.com/strips-finance/rabbit-dex-backend/model"
	profile "github.com/strips-finance/rabbit-dex-backend/profile"
)

// MockMarketMetaService is a mock of MarketMetaService interface.
type MockMarketMetaService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketMetaServiceMockRecorder
}

// MockMarketMetaServiceMockRecorder is the mock recorder for MockMarketMetaService.
type MockMarketMetaServiceMockRecorder struct {
	mock *MockMarketMetaService
}

// NewMockMarketMetaService creates a new mock instance.
func NewMockMarketMetaService(ctrl *gomock.Controller) *MockMarketMetaService {
	mock := &MockMarketMetaService{ctrl: ctrl}
	mock.recorder = &MockMarketMetaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketMetaService) EXPECT() *MockMarketMetaServiceMockRecorder {
	return m.recorder
}

// GetMarketsIds mocks base method.
func (m *MockMarketMetaService) GetMarketsIds() []profile.MarketId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketsIds")
	ret0, _ := ret[0].([]profile.MarketId)
	return ret0
}

// GetMarketsIds indicates an expected call of GetMarketsIds.
func (mr *MockMarketMetaServiceMockRecorder) GetMarketsIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketsIds", reflect.TypeOf((*MockMarketMetaService)(nil).GetMarketsIds))
}

// GetUpdatedProfilesMeta mocks base method.
func (m *MockMarketMetaService) GetUpdatedProfilesMeta(arg0 context.Context, arg1 profile.MarketsLastTs) (profile.ProfilesMeta, profile.MarketsLastTs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedProfilesMeta", arg0, arg1)
	ret0, _ := ret[0].(profile.ProfilesMeta)
	ret1, _ := ret[1].(profile.MarketsLastTs)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUpdatedProfilesMeta indicates an expected call of GetUpdatedProfilesMeta.
func (mr *MockMarketMetaServiceMockRecorder) GetUpdatedProfilesMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedProfilesMeta", reflect.TypeOf((*MockMarketMetaService)(nil).GetUpdatedProfilesMeta), arg0, arg1)
}

// MockProfileCacheService is a mock of ProfileCacheService interface.
type MockProfileCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileCacheServiceMockRecorder
}

// MockProfileCacheServiceMockRecorder is the mock recorder for MockProfileCacheService.
type MockProfileCacheServiceMockRecorder struct {
	mock *MockProfileCacheService
}

// NewMockProfileCacheService creates a new mock instance.
func NewMockProfileCacheService(ctrl *gomock.Controller) *MockProfileCacheService {
	mock := &MockProfileCacheService{ctrl: ctrl}
	mock.recorder = &MockProfileCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileCacheService) EXPECT() *MockProfileCacheServiceMockRecorder {
	return m.recorder
}

// GetExtendedProfiles mocks base method.
func (m *MockProfileCacheService) GetExtendedProfiles(ctx context.Context, profilesIds ...profile.ProfileId) ([]*model.ExtendedProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range profilesIds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExtendedProfiles", varargs...)
	ret0, _ := ret[0].([]*model.ExtendedProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtendedProfiles indicates an expected call of GetExtendedProfiles.
func (mr *MockProfileCacheServiceMockRecorder) GetExtendedProfiles(ctx interface{}, profilesIds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, profilesIds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtendedProfiles", reflect.TypeOf((*MockProfileCacheService)(nil).GetExtendedProfiles), varargs...)
}

// UpdateProfilesCachesMetas mocks base method.
func (m *MockProfileCacheService) UpdateProfilesCachesMetas(ctx context.Context, data []*model.ProfileCacheMetas) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilesCachesMetas", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfilesCachesMetas indicates an expected call of UpdateProfilesCachesMetas.
func (mr *MockProfileCacheServiceMockRecorder) UpdateProfilesCachesMetas(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilesCachesMetas", reflect.TypeOf((*MockProfileCacheService)(nil).UpdateProfilesCachesMetas), ctx, data)
}

// MockNotifyService is a mock of NotifyService interface.
type MockNotifyService struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyServiceMockRecorder
}

// MockNotifyServiceMockRecorder is the mock recorder for MockNotifyService.
type MockNotifyServiceMockRecorder struct {
	mock *MockNotifyService
}

// NewMockNotifyService creates a new mock instance.
func NewMockNotifyService(ctrl *gomock.Controller) *MockNotifyService {
	mock := &MockNotifyService{ctrl: ctrl}
	mock.recorder = &MockNotifyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyService) EXPECT() *MockNotifyServiceMockRecorder {
	return m.recorder
}

// PublishExtendedProfiles mocks base method.
func (m *MockNotifyService) PublishExtendedProfiles(ctx context.Context, data []*model.ExtendedProfileTierStatusData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExtendedProfiles", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExtendedProfiles indicates an expected call of PublishExtendedProfiles.
func (mr *MockNotifyServiceMockRecorder) PublishExtendedProfiles(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExtendedProfiles", reflect.TypeOf((*MockNotifyService)(nil).PublishExtendedProfiles), ctx, data)
}

// MockLiquidateStrategy is a mock of LiquidateStrategy interface.
type MockLiquidateStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockLiquidateStrategyMockRecorder
}

// MockLiquidateStrategyMockRecorder is the mock recorder for MockLiquidateStrategy.
type MockLiquidateStrategyMockRecorder struct {
	mock *MockLiquidateStrategy
}

// NewMockLiquidateStrategy creates a new mock instance.
func NewMockLiquidateStrategy(ctrl *gomock.Controller) *MockLiquidateStrategy {
	mock := &MockLiquidateStrategy{ctrl: ctrl}
	mock.recorder = &MockLiquidateStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiquidateStrategy) EXPECT() *MockLiquidateStrategyMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockLiquidateStrategy) Process(pc *model.ProfileCache) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", pc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockLiquidateStrategyMockRecorder) Process(pc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockLiquidateStrategy)(nil).Process), pc)
}

// MockVolumeCache is a mock of VolumeCache interface.
type MockVolumeCache struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeCacheMockRecorder
}

// MockVolumeCacheMockRecorder is the mock recorder for MockVolumeCache.
type MockVolumeCacheMockRecorder struct {
	mock *MockVolumeCache
}

// NewMockVolumeCache creates a new mock instance.
func NewMockVolumeCache(ctrl *gomock.Controller) *MockVolumeCache {
	mock := &MockVolumeCache{ctrl: ctrl}
	mock.recorder = &MockVolumeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeCache) EXPECT() *MockVolumeCacheMockRecorder {
	return m.recorder
}

// GetVolume mocks base method.
func (m *MockVolumeCache) GetVolume(profileId profile.ProfileId) (decimal.Decimal, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", profileId)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockVolumeCacheMockRecorder) GetVolume(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockVolumeCache)(nil).GetVolume), profileId)
}

// MockTierCalc is a mock of TierCalc interface.
type MockTierCalc struct {
	ctrl     *gomock.Controller
	recorder *MockTierCalcMockRecorder
}

// MockTierCalcMockRecorder is the mock recorder for MockTierCalc.
type MockTierCalcMockRecorder struct {
	mock *MockTierCalc
}

// NewMockTierCalc creates a new mock instance.
func NewMockTierCalc(ctrl *gomock.Controller) *MockTierCalc {
	mock := &MockTierCalc{ctrl: ctrl}
	mock.recorder = &MockTierCalcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierCalc) EXPECT() *MockTierCalcMockRecorder {
	return m.recorder
}

// GetProfileTierStatus mocks base method.
func (m *MockTierCalc) GetProfileTierStatus(profileId profile.ProfileId) (model.TierStatusData, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileTierStatus", profileId)
	ret0, _ := ret[0].(model.TierStatusData)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetProfileTierStatus indicates an expected call of GetProfileTierStatus.
func (mr *MockTierCalcMockRecorder) GetProfileTierStatus(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileTierStatus", reflect.TypeOf((*MockTierCalc)(nil).GetProfileTierStatus), profileId)
}
